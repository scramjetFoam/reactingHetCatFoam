{

    rho = thermo.rho();
    rho.relax();

    // const volScalarField& psi = thermo.psi();
    // rho = thermo.rho();
    // rho.relax();

    // Thermodynamic density needs to be updated by psi*d(p) after the
    // pressure solution
    const volScalarField psip0(psi*p);

    const volScalarField rAU("rAU", 1.0/UEqn.A());
    const surfaceScalarField rhorAUf("rhorAUf", fvc::interpolate(rho*rAU));

    tmp<volScalarField> rAtU
    (
        pimple.consistent()
    ? volScalarField::New("rAtU", 1.0/(1.0/rAU - UEqn.H1()))
    : tmp<volScalarField>(nullptr)
    );
    tmp<surfaceScalarField> rhorAtUf
    (
        pimple.consistent()
    ? surfaceScalarField::New("rhoRAtUf", fvc::interpolate(rho*rAtU()))
    : tmp<surfaceScalarField>(nullptr)
    );

    const volScalarField& rAAtU = pimple.consistent() ? rAtU() : rAU;
    const surfaceScalarField& rhorAAtUf =
        pimple.consistent() ? rhorAtUf() : rhorAUf;

    tmp<volVectorField> tHbyA;
    if (pressureImplicitPorosity)
    {
        tHbyA = constrainHbyA(trTU()&UEqn.H(), U, p);
    }
    else
    {
        tHbyA = constrainHbyA(trAU()*UEqn.H(), U, p);
    }
    volVectorField& HbyA = tHbyA.ref();

    if (pimple.nCorrPiso() <= 1)
    {
        tUEqn.clear();
    }

    // bool closedVolume = false;

    surfaceScalarField phiHbyA
    (
        "phiHbyA",
        fvc::interpolate(rho)*fvc::flux(HbyA)
        // + MRF.zeroFilter(rhorAUf*fvc::ddtCorr(rho, U, phi, rhoUf))
    );
    MRF.makeRelative(fvc::interpolate(rho), phiHbyA);

    // Update the pressure BCs to ensure flux consistency
    // constrainPressure(p, rho, U, phiHbyA, tmp<surfaceScalarField>(nullptr), MRF);
    constrainPressure(p, rho, U, phiHbyA, rhorAAtUf, MRF);

    fvc::makeRelative(phiHbyA, rho, U);

    bool adjustMass = false;

    if (mesh.schemes().steady())
    {
        adjustMass = adjustPhi(phiHbyA, U, p);
    }

    // if (pimple.consistent())
    // {
    //     phiHbyA += (rhorAAtUf - rhorAUf)*fvc::snGrad(p)*mesh.magSf();
    //     HbyA += (rAAtU - rAU)*fvc::grad(p);
    // }
    
    fvScalarMatrix pDDtEqn
    (
        fvc::ddt(rho) + psi*correction(fvm::ddt(p))
      + fvc::div(phiHbyA)
     ==
        fvModels.source(psi, p, rho.name())
    );

    while (pimple.correctNonOrthogonal())
    {
        tmp<fvScalarMatrix> tpEqn;

        if (pressureImplicitPorosity)
        {
            tpEqn =
            (
                pDDtEqn 
                // - fvm::laplacian(rhorAAtUf, p)
                - fvm::laplacian(rho*trTU(), p)
            );
        }
        else
        {
            tpEqn =
            (
                pDDtEqn 
                // - fvm::laplacian(rhorAAtUf, p)
                // - fvm::laplacian(rho*trTU(), p)
                - fvm::laplacian(rho*trAU(), p)
            );
        }

        fvScalarMatrix& pEqn = tpEqn.ref();

        pEqn.setReference
        (
            pressureReference.refCell(),
            pressureReference.refValue()
        );

        pEqn.solve();

        if (pimple.finalNonOrthogonalIter())
        {
            phi = phiHbyA - pEqn.flux();
        }
    }

    if (mesh.schemes().steady())
    {
        #include "incompressible/continuityErrs.H"
    }
    else
    {
        const bool constrained = fvConstraints.constrain(p);

        // Thermodynamic density update
        thermo.correctRho(psi*p - psip0);

        if (constrained)
        {
            rho = thermo.rho();
        }

        #include "rhoEqn.H"
        #include "compressibleContinuityErrs.H"
    }


    // Explicitly relax pressure for momentum corrector
    p.relax();

    if (pressureImplicitPorosity)
    {
        U = HbyA - (trTU() & fvc::grad(p));
    }
    else
    {
        U = HbyA - trAU()*fvc::grad(p);
    }

    U.correctBoundaryConditions();
    fvConstraints.constrain(U);

    if (mesh.schemes().steady())
    {
        fvConstraints.constrain(p);
    }

    // For closed-volume cases adjust the pressure and density levels
    // to obey overall mass continuity
    if (adjustMass && !thermo.incompressible())
    {
        p += (initialMass - fvc::domainIntegrate(thermo.rho()))
            /fvc::domainIntegrate(psi);
        p.correctBoundaryConditions();
    }

    if (mesh.schemes().steady() || pimple.simpleRho() || adjustMass)
    {
        rho = thermo.rho();
    }

    // Correct rhoUf if the mesh is moving
    fvc::correctRhoUf(rhoUf, rho, U, phi, MRF);

    if (mesh.schemes().steady() || pimple.simpleRho())
    {
        rho.relax();
    }

    if (thermo.dpdt())
    {
        dpdt = fvc::ddt(p);

        if (mesh.moving())
        {
            dpdt -= fvc::div(fvc::meshPhi(rho, U), p);
        }
    }

    // rho = thermo.rho();
    // rho.relax();
}

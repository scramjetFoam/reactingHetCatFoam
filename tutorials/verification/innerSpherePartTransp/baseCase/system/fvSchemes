/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  3.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


ddtSchemes
{
    default                             steadyState;
}

gradSchemes
{
    default                                     Gauss linear;
    // grad(U)                                     cellLimited Gauss linear 0.5;
}

divSchemes
{
    // default                             bounded Gauss vanLeer;
    default                             bounded Gauss linear;
    // default                             bounded Gauss SFCD;
    // default                             bounded Gauss linearUpwind grad(U);
    // default                             bounded Gauss upwind;
    // div(phi,U)                          bounded Gauss upwind;
    // div(phi,U)                          bounded Gauss linearUpwind grad(U);
    // div(phi,K)                          bounded Gauss linearUpwind grad(U);
    // div(phi,k)                          bounded Gauss linearUpwind grad(U);
    // div(phi,omega)                      bounded Gauss linearUpwind grad(U);
    div(((rho*nuEff)*dev2(T(grad(U))))) Gauss linear;
    // div(phiRho,(0.5*magSqr(U)))         bounded Gauss linear;
}

laplacianSchemes
{
    // default                                      Gauss linear limited corrected 0.2;
    // default                                      Gauss linear uncorrected;       //orthogonal mesh
    // default                                      Gauss upwind banana;       //orthogonal mesh
    // default                                      Gauss linear corrected 0.2;       //orthogonal mesh
    // default                                      Gauss linear corrected 0.5;       //orthogonal mesh

    default                                     none;       //orthogonal mesh
    laplacian((rho*nuEff),U)		            Gauss linear corrected 0.7;
    laplacian((DEff*CO),(thermo:rho|molM))		Gauss upwind MGradT corrected 0.7;
    laplacian((DEff*(thermo:rho|molM)),CO)		Gauss upwind MGradT corrected 0.7;
    laplacian((kappaEff+((((kappaA+(kappaB*T))+(kappaC*pow(T,2)))+(kappaD*pow(T,3)))*epsEff)),T) Gauss downwind MGradT corrected 0.7; //MK
    laplacian((rho*rAU),p)		                Gauss linear corrected 0.7;

    // laplacian((DEff*CO2),(thermo:rho|molM))		Gauss upwind phi uncorrected;
    // laplacian((DEff*O2),(thermo:rho|molM))		Gauss upwind phi uncorrected;
    // laplacian((DEff*(thermo:rho|molM)),CO)		Gauss upwind phi uncorrected;
    // laplacian((DEff*(thermo:rho|molM)),CO2)		Gauss upwind phi uncorrected;
    // laplacian((DEff*(thermo:rho|molM)),O2)		Gauss upwind phi uncorrected;
    // laplacian((DEff*CO),(thermo:rho|molM))		Gauss linear corrected 0.2;
    // laplacian((DEff*CO2),(thermo:rho|molM))		Gauss linear corrected 0.2;
    // laplacian((DEff*O2),(thermo:rho|molM))		Gauss linear corrected 0.2;
    // laplacian((DEff*(thermo:rho|molM)),CO)		Gauss linear corrected 0.2;
    // laplacian((DEff*(thermo:rho|molM)),CO2)		Gauss linear corrected 0.2;
    // laplacian((DEff*(thermo:rho|molM)),O2)		Gauss linear corrected 0.2;
    // laplacian(kappaEff,T)		                Gauss upwind phi uncorrected;
    // laplacian(kappaEff,T)		                Gauss upwind MGradT uncorrected;
    // laplacian(kappa*epsEff,T)		            Gauss upwind MGradT corrected 0.2;

    // laplacian(kappaPokus,T)		                Gauss upwind MGradT uncorrected;
    // laplacian((rho*rAU),p)		                Gauss linear corrected 0.2;
    // default                                      Gauss upwind banana;       //orthogonal mesh
}

interpolationSchemes
{
    default                             linear;
    flux((rho*HbyA))                    linear;
    flux(HbyA)                          linear;
    interpolate(rho)                    linear;
}

snGradSchemes
{
    default                             limited corrected 0.7;
    // default                             uncorrected;                            // orthogonal mesh
}

fluxRequired
{
    default         no;
    p;
}

wallDist
{
    method          meshWave;
    correctWalls    true;
}

// ************************************************************************* //
